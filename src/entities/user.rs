//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15
use sea_orm::entity::prelude::*;
use serde::{ser::SerializeStruct, Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub name: String,
    pub email: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

// impl From<ActiveModel> for Model {.
//     fn from(value: ActiveModel) -> Self {
//         Model {
//             id: value.id,
//             name: value.name,
//             email: value.email,
//         }
//     }
// }

impl ActiveModelBehavior for ActiveModel {}

// impl Serialize for ActiveModel {
//     fn serialize<S>(&self, serilizer: S) -> Result<S::Ok, S::Error>
//     where
//         S: serde::Serializer,
//     {
//         let mut s = serializer.serialize_struct("Model", 3)?;
//         s.serialize_field("id", &self.id)?;
//         s.serialize_field("name", &self.name)?;
//         s.serialize_field("email", &self.email)?;
//         s.end()
//     }
// }
